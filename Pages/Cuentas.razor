@page "/cuentas"
@inject IJSRuntime JS
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using System.Text.Json


<PageTitle>Cuentas Falladas en 2024</PageTitle>

<h1 class="text-center mb-4">@tituloFallos</h1>
<p>
    Un Fallo es una resolución que aprueba o no las rendiciones de los Organismos a cargo de fondos públicos...
</p>

<div class="mt-5 p-3">
    <canvas id="cuadro-fallos-cuentas"></canvas>
</div>

<div class="overflow-auto mb-5">
    <table class="table table-sm table-responsive table-hover mt-5 tabla-aud-esp text-uppercase">
        <thead class="table-group-divider">
            <tr>
                <th class="bg-transparent">Año</th>
                <th class="bg-transparent">Fallo</th>
                <th class="bg-transparent">Organismo</th>
                <th class="bg-transparent">Fecha</th>
                <th class="bg-transparent">Expte</th>
                <th class="bg-transparent">Area</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cuenta in GetCurrentPageData())
            {
                <tr>
                    <td class="bg-transparent">@cuenta.Anio</td>
                    <td class="bg-transparent">
                        <a class="btn btn-primary text-light" href="javascript:void(0)"
                            @onclick="() => VerDetalleDesdeBusqueda(cuenta.Nro)">
                            @cuenta.Nro
                        </a>
                    </td>
                    <td class="bg-transparent">@cuenta.Organismo</td>
                    <td class="bg-transparent">@cuenta.Fecha</td>
                    <td class="bg-transparent">@cuenta.Expediente</td>
                    <td class="bg-transparent">@cuenta.Area</td>
                </tr>
            }
        </tbody>
    </table>

    <div class="d-flex justify-content-center mt-5 align-items-center gap-4">
        <button class="btn btn-primary me-2" @onclick="PreviousPage" disabled="@(currentPage == 1)">Anterior</button>
        <span>Página @currentPage de @totalPages</span>
        <button class="btn btn-primary ms-2" @onclick="NextPage"
            disabled="@(currentPage == totalPages)">Siguiente</button>
    </div>
</div>

<hr>
<h3 class="mt-5 text-center">Podés buscar un fallo acá</h3>

@* <EditForm class="row g-3 align-items-end" Model="@filtros" OnValidSubmit="Buscar">
    <div class="col-12 col-md-3">
        <label class="form-label">Número</label>
        <InputText class="form-control" @bind-Value="filtros.Numero" />
    </div>

    <div class="col-12 col-md-5">
        <label class="form-label">Org. de Aplicación</label>
        <BSInput InputType="InputType.Select" @bind-Value="filtros.OrgAplicacion" class="form-select">
            <option value="">Seleccione un organismo de aplicación</option>
            <option value="TODOS">TODOS</option>
            @foreach (var organismo in (cuentas ?? Array.Empty<Fallo>())
                        .Select(c => c.Organismo)
                        .Where(o => !string.IsNullOrWhiteSpace(o))
                        .Distinct()
                        .OrderBy(o => o))
            {
                <option value="@organismo">@organismo</option>
            }
        </BSInput>
    </div>

    <div class="col-12 col-md-3">
        <label class="form-label">Palabra clave</label>
        <InputText class="form-control text-center" @bind-Value="filtros.PalabraClave" />
    </div>

    <div class="col-12 d-flex justify-content-center">
        <BSButton Color="BSColor.Primary" Type="Submit" class="px-4 w-auto">
            Buscar
        </BSButton>
    </div>
</EditForm> *@

<BSModal @ref="modalDetalle" Title="Detalle del Fallo" Size="Size.ExtraLarge">

    @if (falloSeleccionado != null)
    {
        <div class="p-5">
            <Header>
                <h1 class="mb-4">Fallo Nº @falloSeleccionado.DigNumero</h1>
            </Header>

            <Content>
                <div class="mb-3">
                    <h6 class="text-muted">Organismo</h6>
                    <p class="mb-1">@falloSeleccionado.EntRazonSocial</p>
                </div>

                <div class="mb-3">
                    <h6 class="text-muted">Destinado a</h6>
                    <p class="mb-1">@falloSeleccionado.AplDigNombre</p>
                </div>

                <div class="mb-3">
                    <h6 class="text-muted">Extracto</h6>
                    <p class="mb-1">@falloSeleccionado.DigExtracto</p>
                </div>

                <hr />

                <div class="row">
                    <div class="col-md-4">
                        <h6 class="text-muted">Fecha de Emisión</h6>
                        <p>@falloSeleccionado.DigFEmision?.ToString("dd/MM/yyyy")</p>
                    </div>
                    <div class="col-md-4">
                        <h6 class="text-muted">Fecha de Publicación</h6>
                        <p>@falloSeleccionado.DigFPublicacion?.ToString("dd/MM/yyyy")</p>
                    </div>
                    <div class="col-md-4">
                        <h6 class="text-muted">Fecha de Vigencia</h6>
                        <p>@falloSeleccionado.DigFVigencia?.ToString("dd/MM/yyyy")</p>
                    </div>
                </div>
            </Content>

        </div>
    }
</BSModal>


<NavLink type="button" class="text-black mt-md-5" href="/">
    <img class="me-2" width="32" height="32" src="https://img.icons8.com/windows/32/000000/return.png" alt="return" />
    VOLVER
</NavLink>

@code {
    private BSModal? modalDetalle;
    private ResultadoDigesto? falloSeleccionado;
    private FiltroBusqueda filtros = new();
    private Fallo[]? cuentas;
    private Fallo[]? cuentasDb;
    private int currentPage = 1;
    private int pageSize = 15;
    private int totalPages;
    private string? tituloFallos;
    private List<ResultadoDigesto>? resultadosCompletos;

    protected override async Task OnInitializedAsync()
    {
        cuentas = await Http.GetFromJsonAsync<Fallo[]>("sample-data/cuentas.json");
        if (cuentas != null)
        {
            totalPages = (int)Math.Ceiling(cuentas.Length / (double)pageSize);
            tituloFallos = $"{cuentas.Length} Cuentas Falladas en 2024";
        }
    }

    private List<Fallo> GetCurrentPageData()
    {
        var source = cuentasDb ?? cuentas ?? Array.Empty<Fallo>();
        int startIndex = (currentPage - 1) * pageSize;
        return source.Skip(startIndex).Take(pageSize).ToList();
    }

    private void PreviousPage()
    {
        if (currentPage > 1) currentPage--;
    }

    private void NextPage()
    {
        if (currentPage < totalPages) currentPage++;
    }

    private async Task Buscar()
    {
        try
        {
            var queryParams = new Dictionary<string, string>();
            if (!string.IsNullOrWhiteSpace(filtros.Numero)) queryParams.Add("DigNumeroDesde", filtros.Numero);
            if (!string.IsNullOrWhiteSpace(filtros.OrgAplicacion)) queryParams.Add("EntIdApl", filtros.OrgAplicacion);
            if (!string.IsNullOrWhiteSpace(filtros.PalabraClave)) queryParams.Add("Keyword", filtros.PalabraClave);

            var queryString = string.Join("&", queryParams.Select(kvp =>
            $"{Uri.EscapeDataString(kvp.Key)}={Uri.EscapeDataString(kvp.Value)}"));

            var url = $"https://localhost:7030/api/Fallos/buscar?{queryString}";

            // Aquí hacemos una petición más controlada
            var response = await Http.GetAsync(url);
            var content = await response.Content.ReadAsStringAsync();

            Console.WriteLine($"Respuesta del servidor:\n{content}");

            if (response.IsSuccessStatusCode)
            {
                var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                };

                resultadosCompletos = JsonSerializer.Deserialize<List<ResultadoDigesto>>(content, options);

                cuentasDb = resultadosCompletos?.Select(d => new Fallo
                {
                    Nro = int.TryParse(d.DigNumero, out var n) ? n : (int?)null,
                    Organismo = d.EntRazonSocial,
                    Fecha = d.DigFEmision?.ToString("dd/MM/yyyy"),
                    Expediente = d.DigId,
                    Area = d.AplDigNombre,
                    Anio = d.DigFEmision?.Year
                }).ToArray();

                currentPage = 1;
                totalPages = (int)Math.Ceiling((cuentasDb?.Length ?? 1) / (double)pageSize);
                tituloFallos = $"{cuentasDb?.Length ?? 0} Fallos encontrados";
            }
            else
            {
                Console.WriteLine($"Error HTTP: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error en Buscar: {ex.Message}");
        }

        StateHasChanged();
    }

    private async Task VerDetalleDesdeBusqueda(int? nroFallo)
    {
        if (nroFallo == null) return;

        falloSeleccionado = await ObtenerDetalleFalloPorNumero(nroFallo.Value);

        if (falloSeleccionado != null)
        {
            await modalDetalle?.ShowAsync();
        }
    }


    private async Task<ResultadoDigesto?> ObtenerDetalleFalloPorNumero(int nroFallo)
    {
        try
        {
            var url = $"https://localhost:7030/api/Fallos/buscar?DigNumeroDesde={nroFallo}";
            var response = await Http.GetAsync(url);
            var content = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                var opciones = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
                var resultados = JsonSerializer.Deserialize<List<ResultadoDigesto>>(content, opciones);
                return resultados?.FirstOrDefault();
            }
            else
            {
                Console.WriteLine($"Error HTTP: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener detalle: {ex.Message}");
        }

        return null;
    }

    private async Task CuadroFallos()
    {
        try
        {
            await JS.InvokeVoidAsync("cuadroFallosCuentas");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error en JS: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CuadroFallos();
        }
    }

    public class FiltroBusqueda
    {
        public string Numero { get; set; } = string.Empty;
        public string OrgAplicacion { get; set; } = string.Empty;
        public string PalabraClave { get; set; } = string.Empty;
    }

    public class ResultadoDigesto
    {
        public int DigId { get; set; }
        public string? DigNumero { get; set; }
        public string? EntRazonSocial { get; set; }
        public DateTime? DigFEmision { get; set; }
        public DateTime? DigFPublicacion { get; set; }
        public DateTime? DigFVigencia { get; set; }
        public string? DigExtracto { get; set; }
        public string? AplDigNombre { get; set; }
    }

    public class Fallo
    {
        public int? Expediente { get; set; }
        public int? Anio { get; set; }
        public string? Organismo { get; set; }
        public int? Nro { get; set; }
        public string? Fecha { get; set; }
        public string? Area { get; set; }
    }
}
